class Solution {
    /* dfs meets TLE problem*/
    // private int ans;
    // public int climbStairs(int n) {
    //     climb(n, 0);
    //     return ans;
    // }
    // private void climb(int n, int pos){
    //     if (pos == n) {
    //         ans++;
    //         return;
    //     }
    //     if (pos > n) return;
    //     climb(n, pos+1);
    //     climb(n, pos+2);
    // }
    
    /* Choose DP instead*/
    public int climbStairs(int n) {
        if (n == 0 || n == 1) return 1;
        int[] dp = new int[n];
        dp[0] = 1; dp[1] = 2;
        for (int i = 2; i < n; i++)
            dp[i] = dp[i-1] + dp[i-2];
        return dp[n-1];
    }
    
}