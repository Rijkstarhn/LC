class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        int m = nums1.length, n = nums2.length;
        Set<Integer> map = new HashSet<>();
        if (m < n) {
            Arrays.sort(nums2);
            for (int i : nums1) {
                if (!map.contains(i) && find(nums2, i)) {
                    map.add(i);
                }
            }
        }
        else {
            Arrays.sort(nums1);
            for (int i : nums2) {
                if (!map.contains(i) && find(nums1, i)) {
                    map.add(i);
                }
            }
        }
        int[] res = new int[map.size()];
        int i = 0;
        for (int num : map){
            res[i++] = num;
           
        }
        return res;
    }
    private boolean find (int[] nums, int i) {
        int lo = 0, hi = nums.length-1;
        while (lo <= hi) {
            int mid = lo+(hi-lo)/2;
            if (nums[mid] == i) return true;
            else if (nums[mid] < i) lo = mid+1;
            else hi = mid-1;
        }
        return false;
    }
}