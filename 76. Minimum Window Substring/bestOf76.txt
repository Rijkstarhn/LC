class Solution {
    public String minWindow(String s, String t) {
        // corner case
        if (s == null || t == null || s.length() < t.length()) return "";
        // initialize
        int count = 0, left = 0, minLen = Integer.MAX_VALUE;
        String ans = "";
        Map<Character, Integer> map = new HashMap<>();
        // Store the letters in T 
        for (char c : t.toCharArray()){
            if (map.containsKey(c)) map.put(c, map.get(c)+1);
            else map.put(c, 1);
        }
        // process
        for (int right = 0; right < s.length(); right++){
            if (map.containsKey(s.charAt(right))) {
                map.put(s.charAt(right), map.get(s.charAt(right))-1);
                if (map.get(s.charAt(right)) >= 0) count++;
            }
            while (count == t.length()){
                // update the minLen
                if (minLen > right-left+1){
                    minLen = right-left+1;
                    ans = s.substring(left, right+1);
                }
                if (map.containsKey(s.charAt(left))) {
                    map.put(s.charAt(left), map.get(s.charAt(left))+1);
                    if (map.get(s.charAt(left)) > 0) count--;
                }
                left++;
            }
        }
        return ans;
    }
}