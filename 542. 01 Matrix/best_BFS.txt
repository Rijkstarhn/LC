class Solution {
    
    private int rowLength, colLength;

    public int[][] updateMatrix(int[][] matrix) {
      rowLength = matrix.length;
      colLength = matrix[0].length;
      int[][] answer = new int[rowLength][colLength];
      Deque<int[]> queue = new LinkedList<>();
      for (int i = 0; i < rowLength; i++) {
          for (int j = 0; j < colLength; j++) {
              if (matrix[i][j] == 0) {
                  answer[i][j] = 0;
                  queue.offer(new int[]{i, j});
              }
              else {
                  answer[i][j] = Integer.MAX_VALUE;
              }
          }
      }
      int[][] directions = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};
      while(!queue.isEmpty()) {
          int size = queue.size();
          for (int i = 0; i < size; i++) {
              int[] pos = queue.poll();
              for (int[] dir : directions) {
                  int row = pos[0] + dir[0];
                  int col = pos[1] + dir[1];
                  if (row < 0 || row >= rowLength || col < 0 || col >= colLength) {
                      continue;
                  }
                  if (answer[pos[0]][pos[1]] + 1 < answer[row][col]) {
                      answer[row][col] = answer[pos[0]][pos[1]] + 1;
                      queue.offer(new int[]{row, col});
                  }
              }
          }
      }  
      return answer;
    }
}