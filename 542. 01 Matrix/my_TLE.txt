class Solution {
    
    private int rowLength, colLength;

    public int[][] updateMatrix(int[][] matrix) {
      rowLength = matrix.length;
      colLength = matrix[0].length;
      int[][] answer = new int[rowLength][colLength];
      for (int i = 0; i < rowLength; i++) {
          for (int j = 0; j < colLength; j++) {
              if (matrix[i][j] == 0) {
                  answer[i][j] = 0;
              }
              else {
                  boolean[][] visited = new boolean[rowLength][colLength];
                  answer[i][j] = bfs(matrix, i, j, visited);
              }
          }
      }
      return answer;
    }
    private int bfs(int[][] matrix, int i, int j, boolean[][] visited) {
      Deque<int[]> queue = new LinkedList<>();
      queue.offer(new int[] {i,j});
      int count = 0;
      while (!queue.isEmpty()) {
          int size = queue.size();
          for (int k = 0; k < size; k++) {
              int[] tmp = queue.poll();
              i = tmp[0];
              j = tmp[1];
              visited[i][j] = true;
              if (matrix[i][j] == 0) return count;
              if (i+1 >= 0 && i+1 < rowLength && !visited[i+1][j]) queue.offer(new int[] {i+1,j});
              if (i-1 >= 0 && i-1 < rowLength && !visited[i-1][j]) queue.offer(new int[] {i-1,j});
              if (j+1 >= 0 && j+1 < colLength && !visited[i][j+1]) queue.offer(new int[] {i,j+1});
              if (j-1 >= 0 && j-1 < colLength && !visited[i][j-1]) queue.offer(new int[] {i,j-1});
          }
          count++;
      }
      return count;
    }
}