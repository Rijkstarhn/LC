class Solution {
    private int rowLength, colLength;
    public int numIslands(char[][] grid) {
        int ans = 0;
        if (grid.length == 0) return ans;
        rowLength = grid.length;
        colLength = grid[0].length;
        boolean[][] marked = new boolean[rowLength][colLength];
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < rowLength; i++){
            for (int j = 0; j < colLength; j++){
                if (grid[i][j] == '0' || marked[i][j]) continue;
                else {
                    ans++;
                    bfs(grid,i,j,q,marked);
                }
            }
        }
        return ans;
    }
    private void bfs(char[][] grid, int i, int j, Queue<Integer> q, boolean[][] marked) {
        int pos = i * colLength + j;
        q.offer(pos);
        while (!q.isEmpty()) {
            int size = q.size();
            for (int k = 0; k < size; k++) {
                pos = q.poll();
                i = pos / colLength;
                j = pos % colLength;
                shouldPutIntoQueue(grid, i-1, j, q, marked);
                shouldPutIntoQueue(grid, i+1, j, q, marked);
                shouldPutIntoQueue(grid, i, j-1, q, marked);
                shouldPutIntoQueue(grid, i, j+1, q, marked);
            }
        }
    }
    private void shouldPutIntoQueue(char[][] grid, int i, int j, Queue<Integer> q, boolean[][] marked) {
        if (i < 0 || i > rowLength - 1 || j < 0 || j > colLength - 1) {
            return;
        }
        if (!marked[i][j] && grid[i][j] == '1') {
            int pos = i * colLength + j;
            q.offer(pos);
            marked[i][j] = true;
        }
    }
}