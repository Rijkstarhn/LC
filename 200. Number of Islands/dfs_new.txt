class Solution {
    private int rowLength, colLength;
    public int numIslands(char[][] grid) {
        int ans = 0;
        if (grid.length == 0) return ans;
        rowLength = grid.length;
        colLength = grid[0].length;
        boolean[][] marked = new boolean[rowLength][colLength];
        for (int i = 0; i < rowLength; i++){
            for (int j = 0; j < colLength; j++){
                if (grid[i][j] == '0' || marked[i][j]) continue;
                else {
                    ans++;
                    dfs(grid,i,j,marked);
                }
            }
        }
        return ans;
    }
    private void dfs(char[][] grid, int i, int j, boolean[][] marked) {
        marked[i][j] = true;
        if (grid[i][j] == '0') {
            return;
        }
        if (i+1 >= 0 && i+1 < rowLength && !marked[i+1][j]) dfs(grid, i+1, j, marked);
        if (i-1 >= 0 && i-1 < rowLength && !marked[i-1][j]) dfs(grid, i-1, j, marked);
        if (j+1 >= 0 && j+1 < colLength && !marked[i][j+1]) dfs(grid, i, j+1, marked);
        if (j-1 >= 0 && j-1 < colLength && !marked[i][j-1]) dfs(grid, i, j-1, marked);
    }
}