class Solution {
    private int rowLength, colLength;
    public int numIslands(char[][] grid) {
        int ans = 0;
        if (grid.length == 0) return ans;
        rowLength = grid.length;
        colLength = grid[0].length;
        boolean[] marked = new boolean[rowLength*colLength];
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < rowLength; i++){
            for (int j = 0; j < colLength; j++){
                int pos = i*colLength+j;
                if (grid[i][j] == '0' || marked[pos]) continue;
                else {
                    ans++;
                    dfs(grid,i,j,marked);
                }
            }
        }
        return ans;
    }
    private void dfs(char[][] grid, int i, int j, boolean[] marked){
        int pos = i*colLength+j;
        if (i < 0 || i >= rowLength || j < 0 || j >= colLength || grid[i][j] == '0' || marked[pos]) return;
        marked[pos] = true;
        dfs(grid,i-1,j,marked);
        dfs(grid,i+1,j,marked);
        dfs(grid,i,j-1,marked);
        dfs(grid,i,j+1,marked);
    }
}