/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        return buildTree(inorder, postorder, postorder.length - 1, 0, inorder.length - 1);
    }
    private TreeNode buildTree(int[] inorder, int[] postorder, int pos, int in_low, int in_high) {
        if (in_low > in_high) return null;
        TreeNode root = new TreeNode(postorder[pos]);
        int in_root = 0;
        for (int i = 0; i < inorder.length; i++) {
            if (inorder[i] == postorder[pos]) in_root = i;
        }
        root.left = buildTree(inorder, postorder, (pos - 1) - (in_high - in_root), in_low, in_root - 1);
        root.right = buildTree(inorder, postorder, pos - 1, in_root + 1, in_high);
        return root;
    }
}