class Solution {
    
    private int maxLength;
    private int maxPosition;
    
    public String longestPalindrome(String s) {
        if (s.length() == 0) return "";
        if (s.length() == 1) return s;
        if (s.length() == 2 && s.charAt(0) == s.charAt(1)) return s;
        if (s.length() == 2 && s.charAt(0) != s.charAt(1)) return s.substring(0,1);
        int i = 0;
        while (i < s.length()) {
            if (i+1 < s.length() && s.charAt(i) == s.charAt(i+1)) {
                int length = findEvenPalindromic(s, i);
                if (maxLength < length){
                    maxPosition = i;
                    maxLength = length; 
                }
            }
            if (i+2 < s.length() && s.charAt(i) == s.charAt(i+2)) {
                int length = findOddPalindromic(s, i+1);
                if (maxLength < length){
                    maxPosition = i+1;
                    maxLength = length; 
                }
            }
            i++;
        }
        if (maxLength == 0) return s.substring(0,1);
        if (maxLength % 2 == 0) return s.substring(maxPosition-maxLength/2+1, maxPosition+maxLength/2+1);
        else return s.substring(maxPosition-maxLength/2, maxPosition+maxLength/2+1);
    }
    
    private int findEvenPalindromic(String s, int i){
        int length = 2;
        for (int j = i - 1, k = i + 2; j >= 0 && k < s.length(); j--, k++){
            if (s.charAt(j) == s.charAt(k)) length += 2;
            else break;
        }
        return length;
    }
    
    private int findOddPalindromic(String s, int i){
        int length = 3;
        for (int j = i - 2, k = i + 2; j >= 0 && k < s.length(); j--, k++){
            if (s.charAt(j) == s.charAt(k)) length += 2;
            else break;
        }
        return length;
    }
}